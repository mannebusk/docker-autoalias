#!/bin/bash
#
# Copyright 2020 Manne Busk
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
onNetwork () {
    local JSON=$1
    local ACTION=$(echo $JSON | jq '"\(.Action)"' | sed 's/"//g')
    local NETWORK=$(echo $JSON | jq '"\(.Actor.Attributes.name)"' | sed 's/"//g')
    local CONTAINER=$(echo $JSON | jq '"\(.Actor.Attributes.container)"' | sed 's/"//g')

    if [ ! -z $CONTAINER ]; then
        local INFO=$(docker inspect $CONTAINER);
        local NAME=$(echo $INFO | jq '.[].Name' | sed 's/"//g ; s/^\///g');
        local IP=$(echo $INFO | jq ".[].NetworkSettings.Networks[\"$NETWORK\"].IPAddress" | sed 's/"//g');

        if [[ ! -z $INFO && ! -z $NAME ]]; then
            if [[ $ACTION == connect && ! -z $IP ]]; then
                sed -i -E "/$NAME # docker network|^$IP/d" /etc/hosts
                echo "$IP $NAME # docker network $NETWORK" >> /etc/hosts
                echo "Adding $NAME ($IP) to /etc/hosts"
            elif [[ $ACTION == disconnect ]]; then
                sed -i -E "/$NAME # docker network/d" /etc/hosts
                echo "Removing $NAME from /etc/hosts";
            fi
        fi
    fi
}

docker events \
    --format '{{json .}}' \
    --filter 'type=network' \
    --filter 'event=connect' \
    --filter 'event=disconnect' \
    |  while read line; do onNetwork $line ; done
